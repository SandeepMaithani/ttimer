{"version":3,"sources":["components/TypeSelect.js","helpers.js","components/TimeDisplay.js","components/Controls.js","components/ToggleSound.js","containers/Pomodoro.js","index.js"],"names":["TypeSelect","types","changeType","selected","className","map","type","index","key","name","onClick","pad2","num","formatTime","time","minutes","Math","floor","seconds","TimeDisplay","status","progress","document","title","circumference","normalizedRadius","PI","strokeDashoffset","width","viewBox","radius","stroke","fill","strokeWidth","r","cx","cy","strokeDasharray","style","Controls","start","reset","pause","running","interval","ToggleSound","sound","toggleSound","Pomodoro","props","handleKeyUp","event","pauseTimer","resetTimer","length","setState","selectedType","tick","state","stopInterval","play","Notification","clearInterval","startTimer","setInterval","currentTime","getStatus","getProgress","current","total","handleToggleSound","window","localStorage","setItem","getItem","JSON","parse","addEventListener","this","requestPermission","Audio","removeEventListener","Component","defaultProps","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.337bbc01.chunk.js","sourcesContent":["import React from 'react';\r\nimport './TypeSelect.css';\r\n\r\nconst TypeSelect = ({ types, changeType, selected }) => {\r\n    return (\r\n        <div className=\"TypeSelect\">\r\n            {types.map((type,index) => (\r\n                <button \r\n                    key={type.name}\r\n                    onClick={() => changeType(type)}\r\n                    className={type === selected ? 'active' : ''}\r\n                    >\r\n                    {type.name} <span>[{index + 1}]</span>\r\n                </button>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TypeSelect;","function pad2(num) {\r\n    return num > 9 ? num : `0${num}`;\r\n}\r\n\r\nexport function formatTime(time) {\r\n    const minutes = pad2(Math.floor(time / 60));\r\n    const seconds = pad2(Math.floor(time % 60));\r\n\r\n    return `${minutes}:${seconds}`;\r\n}","import React from 'react';\r\nimport { formatTime } from '../helpers';\r\nimport './TimeDisplay.css';\r\n\r\n\r\n\r\n\r\nconst TimeDisplay = ({ time, status,progress}) => {\r\n    document.title = `${formatTime(time)}  Pomodoro`;\r\n\r\n    const radius = 150;\r\n    const stroke = 5;\r\n    const normalizedRadius = radius - stroke * 2;\r\n    const circumference = normalizedRadius * 2 * Math.PI;\r\n    const strokeDashoffset = circumference - (progress / 100) * circumference;\r\n    return (\r\n        <div className=\"TimeDisplay\">\r\n            <svg width=\"100%\" viewBox={`0 0 ${radius * 2} ${radius * 2}`}>\r\n            <circle \r\n              stroke=\"#ddd\"\r\n              fill = \"#fff\"\r\n              strokeWidth={stroke}\r\n              r ={normalizedRadius}\r\n              cx ={radius}\r\n              cy ={radius}\r\n            />\r\n            <circle \r\n                stroke=\"#D9534F\"\r\n                fill=\"transparent\"\r\n                strokeWidth={stroke}\r\n                strokeDasharray={circumference + ' ' + circumference}\r\n                style={{ strokeDashoffset }}\r\n                r={normalizedRadius}\r\n                cx={radius}\r\n                cy={radius}\r\n            />\r\n            </svg>\r\n            <div>\r\n                <h1>{formatTime(time)}</h1>\r\n                <p>{status}</p>\t        \r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TimeDisplay;","import React from 'react';\r\nimport './Controls.css';\r\n\r\nconst Controls = ({ start,reset,pause,running,interval,time}) => {\r\n    return (\r\n        <div className=\"Controls\">\r\n            {running === false ?(\r\n                <button onClick={start} className=\"start\">\r\n                    {time === 0 ? 'Restart timer' : 'Start timer'}\r\n                </button>\r\n            ) : (\r\n                <>\r\n                        <div>\r\n                            <button onClick={reset} className=\"reset\">\r\n                                Reset\r\n         `                  </button>\r\n                            <button onClick={pause} className={interval ? 'pause' : 'resume'}>\r\n                                {interval ? 'Pause' : 'Resume'}\r\n                            </button>\r\n                        </div>\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default Controls\r\n","import React from 'react';\r\nimport './ToggleSound.css';\r\n\r\nconst ToggleSound = ({ sound, toggleSound }) => {\r\n    return (\r\n        <button\r\n            className={`ToggleSound ${sound && 'active'}`}\r\n            onClick={toggleSound}\r\n            title={sound ? 'Disable Sound' : 'Enable Sound'}\r\n        >\r\n            <i className={`fa fa-volume-${sound ? 'up' : 'mute'}`} />\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default ToggleSound;","import React, { Component } from 'react';\r\nimport TypeSelect from '../components/TypeSelect';\r\nimport TimeDisplay from '../components/TimeDisplay';\r\nimport Controls from '../components/Controls';\r\nimport ToggleSound from '../components/ToggleSound';\r\nimport './Pomodoro.css';\r\n\r\nclass Pomodoro extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            selectedType: props.types[0],\r\n            time: props.types[0].time,\r\n            interval:null,\r\n            running:false,\r\n            sound:window.localStorage.getItem('pomodoro-react-sound') !== null? JSON.parse(window.localStorage.getItem('pomodoro-react-sound')): true\r\n        };  \r\n    }\r\n    static defaultProps = {\r\n        types: [\r\n            { name: 'Pomodoro',time: 1500 },\r\n            { name: 'Short Break',time: 300 },\r\n            { name: 'Long Break',time: 900 },\r\n        ]\r\n    };\r\n    componentDidMount(){\r\n        document.addEventListener('keyup',this.handleKeyUp);\r\n        Notification.requestPermission();\r\n        this.sound = new Audio('bell.flac');\r\n        }\r\n    componentWillUnmount() {\r\n        document.removeEventListener('keyup',this.handleKeyUp);\r\n        }\r\n\r\n    handleKeyUp = event => {\r\n        if(event.key === ' ') {\r\n            this.pauseTimer();\r\n        } else if (event.key === 'Escape') {\r\n            this.resetTimer();\r\n        } else if (event.key >= 1 && event.key <= this.props.types.length) {\r\n                this.changeType(this.props.types[event.key-1]);\r\n            }\r\n        };\r\n\r\n    changeType = type => {\r\n        this.resetTimer();\r\n        this.setState({ selectedType: type, time: type.time, running: false });\r\n    };\r\n\r\n    tick = () => {\r\n        if(this.state.time<=1){\r\n            this.stopInterval();\r\n            this.setState({ running:false });\r\n            if (this.state.sound) \r\n                this.sound.play();\r\n            try {\r\n                new Notification(`${this.state.selectedType.name} finished!`);    \r\n            } catch {}\r\n        }\r\n        this.setState(state => ({ time: state.time -1}));\r\n    };\r\n    \r\n\r\n    stopInterval = () => {\r\n        clearInterval(this.state.interval);\r\n        this.setState({ interval:null });\r\n    };\r\n\r\n    startTimer = () => {\r\n        this.setState(state => ({\r\n            running:true,\r\n            interval:setInterval(this.tick,1000),\r\n            time: state.time >0 ? state.time:state.selectedType.time\r\n        }));\r\n        this.sound.pause();\r\n        this.sound.currentTime = 0;\r\n\r\n    };\r\n\r\n    resetTimer = () => {\r\n        this.stopInterval();\r\n        this.setState(state => ({\r\n            time: state.selectedType.time,\r\n            running: false\r\n        }));\r\n    };\r\n\r\n    pauseTimer = () => {\r\n        this.state.interval ? this.stopInterval() : this.startTimer();\r\n    };\r\n    getStatus = () => {\r\n        const { time, running, interval } = this.state;\r\n        if (time === 0) return 'Finished';\r\n        if (running && !interval) return 'Paused';\r\n        if (running) return 'Running';\r\n    };\r\n    getProgress = () => {\r\n        const current = this.state.time;\r\n        const total = this.state.selectedType.time;\r\n        return ((total - current) / total) * 100;\r\n    };\r\n    handleToggleSound = () => {\r\n        this.setState(\r\n            state => ({\r\n                sound: !state.sound\r\n            }),\r\n            () => {\r\n                window.localStorage.setItem('pomodoro-react-sound', this.state.sound);\r\n            }\r\n        );\r\n    };\r\n    render() {\r\n        const { time, running, interval, selectedType, sound } = this.state;\r\n        const { types } = this.props;\r\n\r\n        return (\r\n            <div className=\"Pomodoro\">\r\n                <TypeSelect\r\n                    types={types}\r\n                    selected={selectedType}\r\n                    changeType={this.changeType}\r\n                />\r\n                <TimeDisplay time={time} status={this.getStatus()} progress={this.getProgress()} />\r\n                <Controls\r\n                    start={this.startTimer}\r\n                    reset={this.resetTimer}\r\n                    pause={this.pauseTimer}\r\n                    running={running}\r\n                    interval={interval}\r\n                    time = {time}\r\n                />\r\n                <ToggleSound sound={sound} toggleSound={this.handleToggleSound} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Pomodoro;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Pomodoro from './containers/Pomodoro';\n\nReactDOM.render(<Pomodoro />, document.getElementById('root'));"],"sourceRoot":""}